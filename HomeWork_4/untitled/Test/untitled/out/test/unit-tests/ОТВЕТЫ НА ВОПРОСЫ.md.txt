## Ответы на вопросы

### Почему использование тестовых заглушек может быть полезным при написании модульных тестов?

Использование тестовых заглушек может быть полезным при написании модульных тестов, так как они позволяют изолировать 
тестируемый модуль от зависимостей на другие модули или внешние ресурсы. Это упрощает написание и поддержку тестов, 
так как не нужно создавать и поддерживать сложные среды для тестирования. Вместо этого можно создать заглушки, 
которые имитируют работу зависимых модулей или ресурсов, и проверить, как модуль взаимодействует с ними. 
Также использование заглушек позволяет проводить тестирование в условиях, которые могут быть трудно воссоздать в реальной среде, 
например, тестирование ошибочных сценариев или крайних случаев.

### Какой тип тестовой заглушки следует использовать, если вам нужно проверить, что метод был вызван с определенными аргументами?

Для проверки вызова метода с определенными аргументами следует использовать моки (mocks). 
Моки позволяют создавать объекты, которые имитируют поведение реальных объектов, 
но не содержат реальной логики. Вместо этого они предоставляют заранее заданные ответы 
на вызовы методов и позволяют проверять, какие методы были вызваны с какими аргументами. 
Таким образом, можно убедиться, что тестируемый модуль взаимодействует с зависимыми объектами правильно.

### Какой тип тестовой заглушки следует использовать, если вам просто нужно вернуть определенное значение или исключение в ответ на вызов метода?

Для этой задачи следует использовать stubs заглушки.

### Какой тип тестовой заглушки вы бы использовали для имитации  взаимодействия с внешним API или базой данных?

Для имитации взаимодействия с внешним API или базой данных следует использовать mock-объекты. 
Они позволяют создавать имитацию поведения внешнего сервиса или базы данных и проверять, 
как код взаимодействует с этими объектами. Mock-объекты могут имитировать различные сценарии 
ответов от внешнего сервиса или базы данных, что позволяет тестировать код в различных условиях.